name: Publish to npm (diagnostic + safe publish)

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: publish-npm
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      PACKAGE_DIR: '.'
      REGISTRY: '//registry.npmjs.org'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: ${{ env.REGISTRY }}
          cache: 'npm'

      - name: Fail early if NPM_TOKEN secret missing
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "ERROR: NPM_TOKEN secret is not set for this repository. Add it under Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Create repo .npmrc
        run: echo "${{ secrets.DOT_NPMRC }}" > .npmrc 

      - name: Create repo .npmrc
        run: echo "${{ secrets.ESLINT_CONFIG }}" > eslint.config.js

      - name: Diagnostics npm config registry and whoami
        run: |
          echo "----- npm config list -----"
          npm config list -l
          echo "registry: $(npm config get registry)"
          echo "----- npm whoami (shows authenticated user) -----"
          npm whoami || true
          echo "----- masked ~/.npmrc (last 6 chars shown) -----"
          if [ -f ~/.npmrc ]; then
            awk -F= '{tok=$2; gsub(/^[[:space:]]+|[[:space:]]+$/,"",tok); if(length(tok)>6){printf "%s=***%s\n",$1,substr(tok,length(tok)-5)} else {print $0}}' ~/.npmrc
          else
            echo "<no ~/.npmrc>"
          fi

      - name: Read package metadata
        id: pkg
        run: |
          PACKAGE_DIR="${{ env.PACKAGE_DIR }}"
          pkgfile="$GITHUB_WORKSPACE/$PACKAGE_DIR/package.json"
          if [ ! -f "$pkgfile" ]; then
            echo "package_name=" >> $GITHUB_OUTPUT
            echo "is_private=true" >> $GITHUB_OUTPUT
            echo "is_scoped=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          name=$(node -pe "require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').name || ''")
          is_private=$(node -pe "Boolean(require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').private)")
          publish_cfg=$(node -pe "JSON.stringify(require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').publishConfig || {})")
          echo "package_name=$name" >> $GITHUB_OUTPUT
          echo "is_private=$is_private" >> $GITHUB_OUTPUT
          echo "publish_config=$publish_cfg" >> $GITHUB_OUTPUT
          is_scoped=false
          if [ "${name#@}" != "$name" ]; then
            is_scoped=true
          fi
          echo "is_scoped=$is_scoped" >> $GITHUB_OUTPUT

      - name: Show package info
        run: |
          echo "Package: ${{ steps.pkg.outputs.package_name }}"
          echo "Private: ${{ steps.pkg.outputs.is_private }}"
          echo "Scoped: ${{ steps.pkg.outputs.is_scoped }}"
          echo "publishConfig: ${{ steps.pkg.outputs.publish_config }}"

      - name: Check scope ownership (fail with guidance if mismatch)
        if: ${{ steps.pkg.outputs.is_scoped == 'true' }}
        run: |
          pkg="${{ steps.pkg.outputs.package_name }}"
          scope="${pkg%%/*}"; scope="${scope#@}"
          whoami=$(npm whoami 2>/dev/null || echo "__WHOAMI_FAIL__")
          echo "Package scope: $scope"
          echo "Authenticated npm user: $whoami"
          if [ "$whoami" == "__WHOAMI_FAIL__" ]; then
            echo "ERROR: npm whoami failed. Token invalid or registry auth issue. Ensure NPM_TOKEN is a valid automation token."
            exit 1
          fi
          if [ "$whoami" != "$scope" ]; then
            echo "ERROR: scope ownership mismatch. Publishing @${scope}/* requires an npm account/org named '${scope}' or membership in that org."
            echo "Fixes:"
            echo " - Use an NPM token from the '${scope}' npm account (or from an account that's an owner of that org)."
            echo " - Change package.json name to an unscoped name if you don't need the scope."
            exit 1
          fi
          echo "Scope ownership looks OK."

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Dry-run publish (shows what would be published)
        run: npm publish --dry-run --access public

      - name: Publish to npm (final)
        run: npm publish --access public || true
