name: Publish to npm
on:
  # Trigger on push to main and allow manual runs
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: publish-npm
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      PACKAGE_DIR: '.'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Write .npmrc (authenticate)
        if: secrets.NPM_TOKEN != ''
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          cat ~/.npmrc

      - name: Verify npm token and whoami
        run: |
          if ! npm whoami >/dev/null 2>&1; then
            echo "ERROR: npm whoami failed. The provided NPM_TOKEN may be invalid or missing."
            echo "Make sure you created an automation token on https://www.npmjs.com/ and saved it as the repository secret NPM_TOKEN."
            npm whoami || true
            exit 1
          fi
          echo "Authenticated as: $(npm whoami)"

      - name: Install dependencies
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm ci

      - name: Run build (if present)
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm run build --if-present

      - name: Run tests (if present)
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm test --if-present

      - name: Read package metadata
        id: pkg
        run: |
          PACKAGE_DIR="${{ env.PACKAGE_DIR }}"
          pkgfile="$GITHUB_WORKSPACE/$PACKAGE_DIR/package.json"
          if [ ! -f "$pkgfile" ]; then
            echo "package_name=" >> $GITHUB_OUTPUT
            echo "is_private=true" >> $GITHUB_OUTPUT
            echo "is_scoped=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          name=$(node -pe "require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').name || ''")
          is_private=$(node -pe "Boolean(require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').private)")
          is_scoped=false
          if [ "${name#@}" != "$name" ]; then
            is_scoped=true
          fi
          echo "package_name=$name" >> $GITHUB_OUTPUT
          echo "is_private=$is_private" >> $GITHUB_OUTPUT
          echo "is_scoped=$is_scoped" >> $GITHUB_OUTPUT

      - name: Check scope ownership (helpful diagnostics for 404)
        if: steps.pkg.outputs.is_scoped == 'true'
        run: |
          name="${{ steps.pkg.outputs.package_name }}"
          scope="${name%%/*}"; scope="${scope#@}"
          whoami=$(npm whoami)
          echo "package scope: $scope"
          echo "npm whoami: $whoami"
          if [ "$whoami" != "$scope" ]; then
            echo "ERROR: scope ownership mismatch. Publishing @${scope}/... requires the npm account or org named '${scope}'."
            echo ""
            echo "Possible fixes:"
            echo " - Use an NPM_TOKEN that belongs to the '${scope}' npm user or an account with permission to publish to that scope."
            echo " - Change package.json \"name\" to an unscoped name (e.g. \"leaflet-svgmarkers\") if you don't need the @${scope} scope."
            echo " - Create or transfer an npm organization named '${scope}' and ensure the publishing account is a member with publish rights."
            exit 1
          fi

      - name: Show package info
        run: |
          echo "Package: ${{ steps.pkg.outputs.package_name }}"
          echo "Private: ${{ steps.pkg.outputs.is_private }}"
          echo "Scoped: ${{ steps.pkg.outputs.is_scoped }}"

      - name: Publish to npm
        if: ${{ steps.pkg.outputs.is_private == 'false' }}
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          # For scoped packages we must publish with --access public
          if [ "${{ steps.pkg.outputs.is_scoped }}" = "true" ]; then
            npm publish --access public
          else
            npm publish
          fi

      - name: Skip publish (private package)
        if: ${{ steps.pkg.outputs.is_private == 'true' }}
        run: |
          echo "This package is marked private in package.json. Skipping publish."
