name: Publish to npm
on:
  # Trigger on push to main and allow manual runs
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: publish-npm
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      # Set this to the package folder if your package lives in a subdirectory,
      # e.g. packages/my-pkg. Keep '.' for root.
      PACKAGE_DIR: '.'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Authenticate to npm
        # NPM_TOKEN must be created in repository Settings → Secrets and variables → Actions
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "NPM_TOKEN is not set. Aborting."
            exit 1
          fi
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN

      - name: Install dependencies
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm ci

      - name: Run build (if present)
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm run build --if-present

      - name: Run tests (if present)
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm test --if-present

      - name: Read package metadata
        id: pkg
        run: |
          PACKAGE_DIR="${{ env.PACKAGE_DIR }}"
          is_private=$(node -pe "Boolean(require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').private)")
          name=$(node -pe "require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').name || ''")
          is_scoped=false
          if [ "${name#@}" != "$name" ]; then
            is_scoped=true
          fi
          echo "is_private=$is_private" >> $GITHUB_OUTPUT
          echo "is_scoped=$is_scoped" >> $GITHUB_OUTPUT
          echo "package_name=$name" >> $GITHUB_OUTPUT

      - name: Show package info
        run: |
          echo "Package: ${{ steps.pkg.outputs.package_name }}"
          echo "Private: ${{ steps.pkg.outputs.is_private }}"
          echo "Scoped: ${{ steps.pkg.outputs.is_scoped }}"

      - name: Publish to npm
        if: ${{ steps.pkg.outputs.is_private == 'false' }}
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          # For scoped packages we must publish with --access public
          if [ "${{ steps.pkg.outputs.is_scoped }}" = "true" ]; then
            npm publish --access public
          else
            npm publish
          fi

      - name: Skip publish (private package)
        if: ${{ steps.pkg.outputs.is_private == 'true' }}
        run: |
          echo "This package is marked private in package.json. Skipping publish."
