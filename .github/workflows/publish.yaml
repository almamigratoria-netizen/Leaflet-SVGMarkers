name: Publish to npm (diagnostics)

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: publish-npm
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      PACKAGE_DIR: '.'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Write .npmrc (authenticate)
        if: secrets.NPM_TOKEN != ''
        run: |
          # write token to home .npmrc (showing only masked snippets later)
          printf "//registry.npmjs.org/:_authToken=%s\n" "${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo ".npmrc written to home"

      - name: Diagnostics: npm config, registry, and whoami
        run: |
          echo "----- npm config list -----"
          npm config list -l
          echo "registry from npm config: $(npm config get registry)"
          echo "----- cat ~/.npmrc (token masked) -----"
          # mask token except last 6 chars for debugging
          if [ -f ~/.npmrc ]; then
            awk -F= '{tok=$2; mask="***"; if(length(tok)>8){printf "%s=***%s\n",$1,substr(tok,length(tok)-5)} else {print $0}}' ~/.npmrc || cat ~/.npmrc
          else
            echo "~/.npmrc not present"
          fi
          echo "----- npm whoami -----"
          npm whoami || true

      - name: Read package metadata
        id: pkg
        run: |
          PACKAGE_DIR="${{ env.PACKAGE_DIR }}"
          pkgfile="$GITHUB_WORKSPACE/$PACKAGE_DIR/package.json"
          if [ ! -f "$pkgfile" ]; then
            echo "package_name=" >> $GITHUB_OUTPUT
            echo "is_private=true" >> $GITHUB_OUTPUT
            echo "is_scoped=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          name=$(node -pe "require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').name || ''")
          is_private=$(node -pe "Boolean(require(process.env.GITHUB_WORKSPACE + '/$PACKAGE_DIR/package.json').private)")
          echo "package_name=$name" >> $GITHUB_OUTPUT
          echo "is_private=$is_private" >> $GITHUB_OUTPUT
          is_scoped=false
          if [ "${name#@}" != "$name" ]; then
            is_scoped=true
          fi
          echo "is_scoped=$is_scoped" >> $GITHUB_OUTPUT

      - name: Registry check for package (helpful diagnostic)
        if: steps.pkg.outputs.package_name != ''
        run: |
          pkg="${{ steps.pkg.outputs.package_name }}"
          echo "Checking registry entry for: $pkg"
          # URL-encode scope/name for curl
          encoded=$(python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1], safe=''))" "$pkg")
          echo "curl -I https://registry.npmjs.org/$encoded"
          curl -I -s https://registry.npmjs.org/$encoded || true
          echo "npm view (may return 404 if not published):"
          npm view "$pkg" --registry https://registry.npmjs.org || true
          echo "npm owner ls (if exists):"
          npm owner ls "$pkg" --registry https://registry.npmjs.org || true

      - name: Show package info
        run: |
          echo "Package: ${{ steps.pkg.outputs.package_name }}"
          echo "Private: ${{ steps.pkg.outputs.is_private }}"
          echo "Scoped: ${{ steps.pkg.outputs.is_scoped }}"

      - name: Install dependencies
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm ci

      - name: Run build (if present)
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm run build --if-present

      - name: Run tests (if present)
        working-directory: ${{ env.PACKAGE_DIR }}
        run: npm test --if-present

      - name: Publish to npm (final attempt)
        if: ${{ steps.pkg.outputs.is_private == 'false' }}
        working-directory: ${{ env.PACKAGE_DIR }}
        run: |
          pkg="${{ steps.pkg.outputs.package_name }}"
          if [ "${{ steps.pkg.outputs.is_scoped }}" = "true" ]; then
            npm publish --access public
          else
            npm publish
          fi
